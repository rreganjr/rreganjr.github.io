<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-29T00:19:28-05:00</updated><id>http://localhost:4000/</id><title type="html">RReganJr Software Developer</title><subtitle>musings</subtitle><author><name>Ron Regan</name></author><entry><title type="html">Notes on OOP Coders course for Ngrx</title><link href="http://localhost:4000/2021/01/28/NotesOnNgrx.html" rel="alternate" type="text/html" title="Notes on OOP Coders course for Ngrx" /><published>2021-01-28T00:00:00-05:00</published><updated>2021-01-28T00:00:00-05:00</updated><id>http://localhost:4000/2021/01/28/NotesOnNgrx</id><content type="html" xml:base="http://localhost:4000/2021/01/28/NotesOnNgrx.html">&lt;p&gt;Notes while working through &lt;a href=&quot;https://www.youtube.com/watch?v=oHmreG1Sul0&amp;amp;list=PLV-DQnYj14bRFWMmuT6ptSL4v5fxMJnOS&amp;amp;index=1&quot;&gt;this course&lt;/a&gt; on YouTube by OOP Coders.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/oopcoders/NGRX-Course&quot;&gt;source code is here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click on commits
scroll to 7. begin and copy the commit id: 3efc22acd6e73ff41c84f70f770a548560de027b&lt;/p&gt;

&lt;p&gt;In VS Projects C:\Users\rregan\VsProjects\&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/oopcoders/NGRX-Course.git
git checkout 3efc22acd6e73ff41c84f70f770a548560de027b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;open is vs code&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd NGRX-Course
code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install the ngrx store, open a terminal and type the following&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng add @ngrx/store@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;see what it did:&lt;/li&gt;
  &lt;li&gt;in app.module.ts
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import { StoreModel } from '@ngrx/store'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and in the imports&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; StoreModule.forRoot({},{})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In package.json under “dependencies”
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;@ngrx/store&quot;: &quot;^9.0.0&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the ngrx dev tools in a terminal type the following&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng add @ngrx/store-devtools@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;see what it did:&lt;/li&gt;
  &lt;li&gt;in app.module.ts
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  StoreDevtoolsModule.instrument({
    maxAge: 25,
    logOnly: environment.production,
  }),
  !environment.production ? StoreDevtoolsModule.instrument() : [],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;** you can configure the instrumentations, see https://ngrx.io/guide/store-devtools/config&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In package.json under “dependencies”
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;@ngrx/store-devtools&quot;: &quot;^10.1.2&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;run the application
** in a terminal window
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In the browser go to the application
** http://localhost:4201/&lt;/li&gt;
  &lt;li&gt;open the dev tools&lt;/li&gt;
  &lt;li&gt;see the Redux tab
see https://ngrx.io/guide/store-devtools for more on dev tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the schedmatics tools by typing the following in a terminal&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng add @ngrx/schematics@latest
(Yes) for use default collection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;see https://ngrx.io/guide/schematics&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;generate a store see https://ngrx.io/guide/schematics/store
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng generate store store --module=app.module.ts --root=true --statePath=store --stateInterface=AppState
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** see the index.ts file in the store folder (store was used because of –statePath)
** see empty interface AppState, this is becaues of –stateInterface
** see the app.module.ts file, in the imports&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StoreModule.forRoot(reducers, {
  metaReducers,
  runtimeChecks: {
    strictStateImmutability: true,
	strictActionImmutability: true,
  }
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;forRoot was used because of –root=true&lt;/li&gt;
  &lt;li&gt;wecan remove the
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StoreModule.forRoot({},{})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;that was generated when we first added the ngrx/store&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;restart the app because we made changes to app.moddule.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doing real stuff&lt;/p&gt;

&lt;p&gt;Now add some actions https://ngrx.io/guide/store/actions 
Using the schematics https://ngrx.io/guide/schematics/action&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">Notes while working through this course on YouTube by OOP Coders.</summary></entry><entry><title type="html">Notes on Why You’re Over-Thinking Your UI/UX with Rohan Puri</title><link href="http://localhost:4000/2020/04/23/OverThinkingYourUXNotes.html" rel="alternate" type="text/html" title="Notes on Why You're Over-Thinking Your UI/UX with Rohan Puri" /><published>2020-04-23T00:00:00-04:00</published><updated>2020-04-23T00:00:00-04:00</updated><id>http://localhost:4000/2020/04/23/OverThinkingYourUXNotes</id><content type="html" xml:base="http://localhost:4000/2020/04/23/OverThinkingYourUXNotes.html">&lt;h2 id=&quot;notes-on-why-youre-over-thinking-your-uiux-with-rohan-puri--harvard-i-lab&quot;&gt;Notes on Why You’re Over-Thinking Your UI/UX with Rohan Puri | Harvard i-lab&lt;/h2&gt;

&lt;p&gt;from Youtube.com &lt;a href=&quot;https://www.youtube.com/watch?v=Is2O666qDPs&quot;&gt;Why You’re Over-Thinking Your UI/UX with Rohan Puri&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;narrow-your-scope&quot;&gt;Narrow Your Scope&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;very narrow band of target users, first-adopters, very specific
(mom’s 40-50 in california who earn 100K+)&lt;/li&gt;
  &lt;li&gt;speeds up development time - only focus on statisfying that user’s need&lt;/li&gt;
  &lt;li&gt;guide testing&lt;/li&gt;
  &lt;li&gt;identify marketing&lt;/li&gt;
  &lt;li&gt;narrows number of variables for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;examples:&lt;/p&gt;

&lt;p&gt;Amazon -&amp;gt; started with just new books&lt;/p&gt;

&lt;p&gt;Google -&amp;gt; search&lt;/p&gt;

&lt;p&gt;Twitter -&amp;gt; sms platform to put a message on a screen&lt;/p&gt;

&lt;p&gt;kill it with that one thing first&lt;/p&gt;

&lt;p&gt;template:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;__ is a &lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__ that allows __&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;__ to &lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;___&lt;/p&gt;

&lt;p&gt;(product) is a (general, relatable tool) that allows (2 adjectives + target users) to (use-case)&lt;/p&gt;

&lt;p&gt;general, relatable tool -&amp;gt; we are the “uber” for what ever&lt;/p&gt;

&lt;p&gt;2 adjectives -&amp;gt; super specific not “very”&lt;/p&gt;

&lt;h3 id=&quot;define-personas&quot;&gt;Define Personas&lt;/h3&gt;

&lt;p&gt;take target users and put a name and context to it. don’t go crazy with it, you don’t need a full page.&lt;/p&gt;

&lt;p&gt;[me: anti-persona - someone that isn’t a target user]&lt;/p&gt;

&lt;p&gt;h2. Check yourself -&amp;gt; Sory board&lt;/p&gt;

&lt;p&gt;[checkout ios storyboard feature]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use personas&lt;/li&gt;
  &lt;li&gt;identify and cut long trees/branches (deep UI workflows)&lt;/li&gt;
  &lt;li&gt;identify dead ends&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stop&quot;&gt;Stop&lt;/h3&gt;

&lt;p&gt;stop thinking, no more mockups, personas, interviews, start building&lt;/p&gt;

&lt;h3 id=&quot;build&quot;&gt;Build&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;html&lt;/li&gt;
  &lt;li&gt;99 designs (don’t spend lots of time on logos and name)&lt;/li&gt;
  &lt;li&gt;keynotopia - package of buttons/menus built in keynote and power point to build a slide show
** balsamic&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;distribute&quot;&gt;Distribute&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;test flight (ios testing)&lt;/li&gt;
  &lt;li&gt;heroku&lt;/li&gt;
  &lt;li&gt;hockey app&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;collect-data&quot;&gt;Collect Data&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;be very quantitative&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heap - collects data on everything&lt;/li&gt;
  &lt;li&gt;google analytics - you must be very specific&lt;/li&gt;
  &lt;li&gt;flurry
(&lt;/li&gt;
  &lt;li&gt;mail chimp&lt;/li&gt;
  &lt;li&gt;hubspot
)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;simplify&quot;&gt;Simplify&lt;/h3&gt;

&lt;p&gt;anyone can make something bigger and more complex&lt;/p&gt;

&lt;p&gt;expose users to feature, look at data, simplify, remove things that aren’t used/useful.&lt;/p&gt;

&lt;p&gt;Prioritize activity Pathways&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what pathway do you need users to engage with the most?&lt;/li&gt;
  &lt;li&gt;What pathway do users use the most?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create/browse/respond&lt;/p&gt;

&lt;p&gt;Focus Above the fold - user’s don’t scroll&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">Notes on Why You’re Over-Thinking Your UI/UX with Rohan Puri | Harvard i-lab</summary></entry><entry><title type="html">Web Browser Viewport</title><link href="http://localhost:4000/2020/04/08/WebViewPort.html" rel="alternate" type="text/html" title="Web Browser Viewport" /><published>2020-04-08T00:00:00-04:00</published><updated>2020-04-08T00:00:00-04:00</updated><id>http://localhost:4000/2020/04/08/WebViewPort</id><content type="html" xml:base="http://localhost:4000/2020/04/08/WebViewPort.html">&lt;h3 id=&quot;notes-on-web-browser-viewport&quot;&gt;Notes on Web Browser Viewport&lt;/h3&gt;

&lt;p&gt;from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Viewport_concepts&quot;&gt;Viewport concepts&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/cssom-view/&quot;&gt;CSSOM View Module&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;viewport - the size of the area for viewing the web page in the browser window&lt;/li&gt;
  &lt;li&gt;window - the size of the window of the browser including the controls not part of a web page. always &amp;gt;= viewport
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.innerWidth&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; the width of the browser window viewport including the vertical scrollbar if present or zero if there is no viewport.&lt;/li&gt;
      &lt;li&gt;The area within the &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHeight&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;innerWidth&lt;/code&gt; is the layout viewport.&lt;/li&gt;
      &lt;li&gt;zooming in makes the layout viewport smaller&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;document - the size of the web page visible or not
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement.clientWidth&lt;/code&gt; is the width of the viewport including padding but not borders, margins, or vertical scrollbars if present.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;layout viewport - the part of the document rendered in the viewport&lt;/li&gt;
  &lt;li&gt;visual viewport - what is visible to the user in the viewport, the layout viewport minus dynamic controls (features that don’t scale with the dimensions of a page.)
    &lt;ul&gt;
      &lt;li&gt;it is always &amp;lt;= layout viewport&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The visual viewport is the part of the web page that is currently visible in the browser and can change. When the user pinch-zooms the page, pops open a dynamic keyboard, or when a previously hidden address bar becomes visible, the visual viewport shrinks but the layout viewport is unchanged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;media queries are relative to the viewport&lt;/li&gt;
  &lt;li&gt;viewport length units are a percent of the viewport
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;width: 50vw;&lt;/code&gt; is 50% of the viewport&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;element.getBoundingClientRect();&lt;/code&gt; - returns the size of an element and its position relative to the viewport. The smallest rectangle which contains the entire element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect&quot;&gt;Mozilla’s API web docs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Properties other than width and height are relative to the top-left of the viewport.&lt;/li&gt;
      &lt;li&gt;The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; &amp;gt;= &lt;code class=&quot;highlighter-rouge&quot;&gt;window.innerHeight&lt;/code&gt; the element is below the viewport&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt; &amp;lt;= &lt;code class=&quot;highlighter-rouge&quot;&gt;window.innerHeight&lt;/code&gt; the element is above the viewport&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;The requirement:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The ISI (Important Safety Information) must always be visible on 25% of the screen.&lt;/li&gt;
      &lt;li&gt;The ISI is embedded in the page, but if that is not 25% visible then display a popup that contains the ISI text and is 25% of the screen size&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;isiBounds.top + percentVisibleSize &amp;gt; viewportHeight&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;(isiBounds.bottom - percentVisibleSize) &amp;lt;= viewportHeight&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some code excerpts, the original was in a VueJS component, &lt;strong&gt;TODO&lt;/strong&gt;  remove VUE stuff and make it work as plain JS&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;some random content&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isiContent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;this content will also be in the popup.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;some other content&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isiPopup&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isi-pop-up container row&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isiPopup&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'height: ' + isiPopupHeight + 'px'&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config.isAnISI &amp;amp;&amp;amp; showISIPopup&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isi-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ISI-popup-nav&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isiPopupTopnav&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isi-top-bar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'background-color: ' + (config.isiTitleBackgroundColor || '#000000') + '; color: ' + (config.isiTitleForegroundColor || '#ffffff')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pop-up-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;strong&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bold-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resizeISI()&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-expand-toggle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isISIPopupExpanded?'active':''&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'border-color: ' + (config.isiTitleForegroundColor || '#ffffff')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn-label&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'color: ' + (config.isiTitleForegroundColor || '#ffffff')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;^&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isi-scroll-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isi-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;richText&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```ecmascript 6
    // register listeners for viewport changes
    function setupViewportChangeListeners() {
      if (window.addEventListener) {
        window.addEventListener(‘DOMContentLoaded’, this.onViewportChangeHandler, false);
        window.addEventListener(‘load’, this.onViewportChangeHandler, false);
        window.addEventListener(‘scroll’, this.onViewportChangeHandler, false);
        window.addEventListener(‘resize’, this.onViewportChangeHandler, false);
      } else if (window.attachEvent) { // Internet Explorer
        window.attachEvent(‘onDOMContentLoaded’, this.onViewportChangeHandler);
        window.attachEvent(‘onload’, this.onViewportChangeHandler);
        window.attachEvent(‘onscroll’, this.onViewportChangeHandler);
        window.attachEvent(‘onresize’, this.onViewportChangeHandler);
      }
    }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// unregister listeners for viewport changes
function removeViewportChangeListeners() {
  if (window.removeEventListener) {
    window.removeEventListener('DOMContentLoaded', this.onViewportChangeHandler, false);
    window.removeEventListener('load', this.onViewportChangeHandler, false);
    window.removeEventListener('scroll', this.onViewportChangeHandler, false);
    window.removeEventListener('resize', this.onViewportChangeHandler, false);
  } else if (window.detachEvent) { // Internet Explorer
    window.detachEvent('onDOMContentLoaded', this.onViewportChangeHandler);
    window.detachEvent('onload', this.onViewportChangeHandler);
    window.detachEvent('onscroll', this.onViewportChangeHandler);
    window.detachEvent('onresize', this.onViewportChangeHandler);
  }
}

function onViewportChangeHandler(e) {
  this.adjustISI()
}

function resizeISI() {
  this.isISIPopupExpanded = !this.isISIPopupExpanded;
  this.adjustISI();
};

function adjustISI() {
  if (this.config.isAnISI &amp;amp;&amp;amp; this.$refs.bounds) {
    const inlineISIBounds = this.$refs.bounds.getBoundingClientRect() // bounds of the isi richtext component in the page
    const isiPopupTopnavHeight = (this.$refs.isiPopupTopnav ? this.$refs.isiPopupTopnav.getBoundingClientRect().height : 0);
    const viewportHeight = (window.innerHeight || document.documentElement.clientHeight);
    const percentVisibleSize = (viewportHeight * (this.config.percentVisible || 25) / 100);
    this.showISIPopup = inlineISIBounds.top + percentVisibleSize &amp;gt; viewportHeight || (inlineISIBounds.bottom &amp;lt;= percentVisibleSize);
    if (this.isISIPopupExpanded) {
      this.isiPopupHeight = (viewportHeight - 100);
    } else {
      // add the height of the popup topnav bar
      this.isiPopupHeight = percentVisibleSize + isiPopupTopnavHeight;
    }
  }
} ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ron Regan</name></author><summary type="html">Notes on Web Browser Viewport</summary></entry><entry><title type="html">How Complexity Evolves</title><link href="http://localhost:4000/2020/03/04/ComplexityEvolvesExample.html" rel="alternate" type="text/html" title="How Complexity Evolves" /><published>2020-03-04T00:00:00-05:00</published><updated>2020-03-04T00:00:00-05:00</updated><id>http://localhost:4000/2020/03/04/ComplexityEvolvesExample</id><content type="html" xml:base="http://localhost:4000/2020/03/04/ComplexityEvolvesExample.html">&lt;h3 id=&quot;example-of-how-complexity-increases-as-a-feature-evolves&quot;&gt;Example of How Complexity Increases as a Feature Evolves&lt;/h3&gt;

&lt;p&gt;video data import&lt;/p&gt;

&lt;p&gt;missing video data for users that aren’t in our system&lt;/p&gt;

&lt;p&gt;missing video data when we remap between ours and their events&lt;/p&gt;

&lt;p&gt;dynamically organize event data at report time&lt;/p&gt;

&lt;p&gt;if a user changes their email address we still need to be able to map the data with the old email address from video data to our system&lt;/p&gt;

&lt;p&gt;reporting only users that become “real” users&lt;/p&gt;

&lt;p&gt;merging two users together - some of our partners send generated email addresses in place of real emails in urls to our events, later they will send us a mapping of generated to real user emails and data that we use to collect the users use of our system so we can accurately report unique users.&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">Example of How Complexity Increases as a Feature Evolves</summary></entry><entry><title type="html">What Users Really Want Versus What Gets Delivered</title><link href="http://localhost:4000/2020/02/13/WantVersusReceive.html" rel="alternate" type="text/html" title="What Users Really Want Versus What Gets Delivered" /><published>2020-02-13T00:00:00-05:00</published><updated>2020-02-13T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/13/WantVersusReceive</id><content type="html" xml:base="http://localhost:4000/2020/02/13/WantVersusReceive.html">&lt;h3 id=&quot;what-users-really-want-versus-what-gets-delivered&quot;&gt;What Users Really Want Versus What Gets Delivered&lt;/h3&gt;

&lt;p&gt;I find requirements the hard part of software development because communication is so hard; much harder than it seems it should be.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What the user really wants.&lt;/li&gt;
  &lt;li&gt;What the user thinks they want.&lt;/li&gt;
  &lt;li&gt;What the user asks for.&lt;/li&gt;
  &lt;li&gt;How I interpret what the user asks for (filling in details with my knowledge of the context.)&lt;/li&gt;
  &lt;li&gt;What I conceptualize that meets my interpretation of what the user wants.
    &lt;ul&gt;
      &lt;li&gt;Mapping my understanding of the requirements to an abstract solution that I think will meet the requirements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What I deliver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a perfect world “what I deliver” equals “what the user really wants”. In the real world what I deliver is close to what I think was requested.&lt;/p&gt;

&lt;h4 id=&quot;language-and-understanding&quot;&gt;Language and Understanding&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes a word or statement means different things to different people.&lt;/li&gt;
  &lt;li&gt;Sometimes people don’t say what they mean, using the wrong word or combination of words.&lt;/li&gt;
  &lt;li&gt;Sometimes people mishear or misinterpret what someone else says.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I worked on a project where my interpretation of the ask was for an international site and a domestic site, and I’m pretty sure it was discussed as the international site should do this and the domestic should do that. We had two different domains. Within a month of the go live date during a demo talking about redirecting users from the domestic site to the international based on registratoin country I was told there should be only one site that shows users different content for domestic versus international based on the registration information.&lt;/p&gt;

&lt;h4 id=&quot;details&quot;&gt;Details&lt;/h4&gt;

&lt;p&gt;Software is effectively unconstrained with respect to options. Because of this a lot of detail is required to produce it.&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">What Users Really Want Versus What Gets Delivered</summary></entry><entry><title type="html">10 Usability Heuristics for User Interface Design</title><link href="http://localhost:4000/2020/02/11/NielsenNormanGroup10UsabilityHeuristics.html" rel="alternate" type="text/html" title="10 Usability Heuristics for User Interface Design" /><published>2020-02-11T00:00:00-05:00</published><updated>2020-02-11T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/11/NielsenNormanGroup10UsabilityHeuristics</id><content type="html" xml:base="http://localhost:4000/2020/02/11/NielsenNormanGroup10UsabilityHeuristics.html">&lt;h3 id=&quot;10-usability-heuristics-for-user-interface-design&quot;&gt;10 Usability Heuristics for User Interface Design&lt;/h3&gt;

&lt;p&gt;These are my notes for the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLJOFJ3Ok_idtb2YeifXlG1-TYoMBLoG6I&quot;&gt;Youtube playlist The 10 Usability Heuristics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also see &lt;a href=&quot;https://www.nngroup.com/articles/ten-usability-heuristics/&quot;&gt;Nielsen Norman Group’s page on 10 Usability Heuristics&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Visibility - keep users informed with what is going on in the system in a reasonable time
    &lt;ul&gt;
      &lt;li&gt;what they need to in a timely manner&lt;/li&gt;
      &lt;li&gt;durable - always on - current state - ex: battery charge or network strength&lt;/li&gt;
      &lt;li&gt;as a response to an action
        &lt;ul&gt;
          &lt;li&gt;acknowledge success or a problem&lt;/li&gt;
          &lt;li&gt;indicate the system is working = progress bar&lt;/li&gt;
          &lt;li&gt;give a feeling of control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;don’t provide updates if not helpful - key pieces of info = user can’t do anything with that feedback.&lt;/li&gt;
      &lt;li&gt;open and continuous communication
    * reliable and predictable - creates trust&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Match between the system and real world
    &lt;ul&gt;
      &lt;li&gt;use language and concepts from real world
        &lt;ul&gt;
          &lt;li&gt;terms familiar to the user rather than system oriented&lt;/li&gt;
          &lt;li&gt;instead of marketing jargon use regular language&lt;/li&gt;
          &lt;li&gt;mental models&lt;/li&gt;
          &lt;li&gt;skeuomorphic - digital experience to match/align a physical experience.&lt;/li&gt;
          &lt;li&gt;real world conventions&lt;/li&gt;
          &lt;li&gt;use user’s language&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;design for them and not you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User Control and Freedom
    &lt;ul&gt;
      &lt;li&gt;need a way to back out of a decision
        &lt;ul&gt;
          &lt;li&gt;back/cancel button&lt;/li&gt;
          &lt;li&gt;undo&lt;/li&gt;
          &lt;li&gt;must be visible to the user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;foster a sense of freedom&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consistency and Standards
    &lt;ul&gt;
      &lt;li&gt;internal and external
        &lt;ul&gt;
          &lt;li&gt;internal - in a product or family&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;color for call to action buttons 
      * external - conventions for industry or in general&lt;/li&gt;
      &lt;li&gt;shopping cart - standard across most sites - upper right corner
      * don’t force users to learn something new - unless it is worth the cost&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Error Prevention
    &lt;ul&gt;
      &lt;li&gt;don’t let users do something catastrophic by accident
        &lt;ul&gt;
          &lt;li&gt;high cost effects&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;location of a button&lt;/li&gt;
      &lt;li&gt;confirmation dialog?&lt;/li&gt;
      &lt;li&gt;support undo function so error doesn’t become permanent
        &lt;ul&gt;
          &lt;li&gt;reply all - timer before actually sending?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Recognition vs. Recall
    &lt;ul&gt;
      &lt;li&gt;why is recognition easier than recall
        &lt;ul&gt;
          &lt;li&gt;is the information provided correct&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;memory retrieval - the more ques we have the easier to retreive&lt;/li&gt;
      &lt;li&gt;show the commands and the user can recognize what they want versus remembering the command on a command line&lt;/li&gt;
      &lt;li&gt;minimize user working&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flexibility and Efficiency of Use
    &lt;ul&gt;
      &lt;li&gt;cntrl-c to copy versus right click copy versus edit menu copy option&lt;/li&gt;
      &lt;li&gt;let the user select their prefered way to work&lt;/li&gt;
      &lt;li&gt;accelerator - speeds up interaction for experienced users&lt;/li&gt;
      &lt;li&gt;macros&lt;/li&gt;
      &lt;li&gt;visibility for new users so they aren’t overwelmed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Aesthetic and Minimalist Design
    &lt;ul&gt;
      &lt;li&gt;focus on the essentials
        &lt;ul&gt;
          &lt;li&gt;doesn’t mean flat or monochromatic colors&lt;/li&gt;
          &lt;li&gt;keeping the content in the visual design focused on essentials&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;signal to noise ration - ratio of relevant to irrelevant information
        &lt;ul&gt;
          &lt;li&gt;text content, animation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;every extra piece of information in the UI takes away from the relevant information&lt;/li&gt;
      &lt;li&gt;visual - graphics or photos - support the primary goals of users -&lt;/li&gt;
      &lt;li&gt;communicate don’t decorate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Recognize, Diagnose and Recover from Errors
    &lt;ul&gt;
      &lt;li&gt;clearly inform users when an error has occurred
        &lt;ul&gt;
          &lt;li&gt;visual treatments (colors) and error message&lt;/li&gt;
          &lt;li&gt;what is the problem, in regular language&lt;/li&gt;
          &lt;li&gt;offer users a solution to solve the problem&lt;/li&gt;
          &lt;li&gt;best - link to solve the problem&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;gmail - supports undoing sending an email&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Help and Documentation
    &lt;ul&gt;
      &lt;li&gt;should be as intuitive as possible not to need helpful, but…&lt;/li&gt;
      &lt;li&gt;consider:
        &lt;ul&gt;
          &lt;li&gt;is it easy to search/find helpful&lt;/li&gt;
          &lt;li&gt;focused on user’s task&lt;/li&gt;
          &lt;li&gt;list steps to be carried out&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;search suggestions&lt;/li&gt;
      &lt;li&gt;minimize the interaction cost to the user&lt;/li&gt;
      &lt;li&gt;make help contextual
        &lt;ul&gt;
          &lt;li&gt;pop over&lt;/li&gt;
          &lt;li&gt;screen shots&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;use analytics to see it works&lt;/li&gt;
      &lt;li&gt;don’t overload users with unnecessary information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;bonus-material-&quot;&gt;Bonus Material :)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Fitts’s Law  &lt;a href=&quot;https://www.youtube.com/watch?v=M-9FbUJk6tI&quot;&gt;youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;the time to acquire a target is a function of the size of the target and the distance to the target&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MT = a + b * log2( 2D / W)

MT = time to select target 
a &amp;amp; b = constants set by type of device
D = distance from starting point to target
W = width of target along axis of motion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;buttons
    &lt;ul&gt;
      &lt;li&gt;submit button for a form - close to the bottom of the input fields&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;important actions should be larger&lt;/li&gt;
  &lt;li&gt;lists - shorter is better&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Hick’s Law - &lt;a href=&quot;https://www.youtube.com/watch?v=pbbTOzArcWQ&quot;&gt;youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;designing long menu lists&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;two criteria
    &lt;ul&gt;
      &lt;li&gt;in order (alphabetically)&lt;/li&gt;
      &lt;li&gt;items are known to the user - they know what the terms mean/are&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;example - list of US States - no matter where a user focuses on the list, they know what they are looking for and where it is in relation to where they are.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Should the whole list  be visible to scan?&lt;/em&gt;&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">10 Usability Heuristics for User Interface Design</summary></entry><entry><title type="html">Dieter Rams - “Good design” principles</title><link href="http://localhost:4000/2020/01/27/DieterRamsGoodDesignPrinciples.html" rel="alternate" type="text/html" title="Dieter Rams - &quot;Good design&quot; principles" /><published>2020-01-27T00:00:00-05:00</published><updated>2020-01-27T00:00:00-05:00</updated><id>http://localhost:4000/2020/01/27/DieterRamsGoodDesignPrinciples</id><content type="html" xml:base="http://localhost:4000/2020/01/27/DieterRamsGoodDesignPrinciples.html">&lt;h3 id=&quot;dieter-rams---good-design-principles&quot;&gt;Dieter Rams - “Good design” principles&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;is innovative – The possibilities for progression are not, by any means, exhausted. Technological development is always offering new opportunities for original designs. But imaginative design always develops in tandem with improving technology, and can never be an end in itself.&lt;/li&gt;
  &lt;li&gt;makes a product useful – A product is bought to be used. It has to satisfy not only functional, but also psychological and aesthetic criteria. Good design emphasizes the usefulness of a product whilst disregarding anything that could detract from it.&lt;/li&gt;
  &lt;li&gt;is aesthetic – The aesthetic quality of a product is integral to its usefulness because products are used every day and have an effect on people and their well-being. Only well-executed objects can be beautiful.&lt;/li&gt;
  &lt;li&gt;makes a product understandable – It clarifies the product’s structure. Better still, it can make the product clearly express its function by making use of the user’s intuition. At best, it is self-explanatory.&lt;/li&gt;
  &lt;li&gt;is unobtrusive – Products fulfilling a purpose are like tools. They are neither decorative objects nor works of art. Their design should therefore be both neutral and restrained, to leave room for the user’s self-expression.&lt;/li&gt;
  &lt;li&gt;is honest – It does not make a product appear more innovative, powerful or valuable than it really is. It does not attempt to manipulate the consumer with promises that cannot be kept.&lt;/li&gt;
  &lt;li&gt;is long-lasting – It avoids being fashionable and therefore never appears antiquated. Unlike fashionable design, it lasts many years – even in today’s throwaway society.&lt;/li&gt;
  &lt;li&gt;is thorough down to the last detail – Nothing must be arbitrary or left to chance. Care and accuracy in the design process show respect towards the consumer.&lt;/li&gt;
  &lt;li&gt;is environmentally friendly – Design makes an important contribution to the preservation of the environment. It conserves resources and minimizes physical and visual pollution throughout the lifecycle of the product.&lt;/li&gt;
  &lt;li&gt;is as little design as possible – Less, but better – because it concentrates on the essential aspects, and the products are not burdened with non-essentials. Back to purity, back to simplicity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Dieter_Rams&quot;&gt;Wikipedia’s page for Dieter Rams&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See Also &lt;a href=&quot;https://www.interaction-design.org/literature/article/dieter-rams-10-timeless-commandments-for-good-design&quot;&gt;Interaction Design Foundation article&lt;/a&gt;&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">Dieter Rams - “Good design” principles</summary></entry><entry><title type="html">Notes on - The Design of Everyday Things</title><link href="http://localhost:4000/2020/01/21/NotesOnTheDesignOfEverydayThings.html" rel="alternate" type="text/html" title="Notes on - The Design of Everyday Things" /><published>2020-01-21T00:00:00-05:00</published><updated>2020-01-21T00:00:00-05:00</updated><id>http://localhost:4000/2020/01/21/NotesOnTheDesignOfEverydayThings</id><content type="html" xml:base="http://localhost:4000/2020/01/21/NotesOnTheDesignOfEverydayThings.html">&lt;p&gt;&lt;em&gt;It’s not your fault - bad user experience is the fault of the designer.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;design-principals&quot;&gt;Design Principals&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Affordances - “is for” Perceived and actual properties of an object. make appropriate actions perceptible. a chair is for sitting. materials, textures.
    &lt;ul&gt;
      &lt;li&gt;https://www.interaction-design.org/literature/topics/affordances - Affordances are an object’s properties that show the possible actions users can take with it, thereby suggesting how they may interact with that object. For instance, a button can look as if it needs to be turned or pushed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conceptual Models - how people perceive something operates. Finding meaning in the events around us.
    &lt;ul&gt;
      &lt;li&gt;mapping of what you want to do to what appears possible.&lt;/li&gt;
      &lt;li&gt;a good conceptual model allows us to predict the effects of our actions.&lt;/li&gt;
      &lt;li&gt;without a good model we do operations as we are told to do them without fully appreciating why or what to expect, using rote knowledge.&lt;/li&gt;
      &lt;li&gt;the conceptual model can be very simple we only need to associate the relationship between the controls and outcomes.&lt;/li&gt;
      &lt;li&gt;the conceptual model must be easily discernible from the controls&lt;/li&gt;
      &lt;li&gt;The design model is the designers conceptual model, the user’s conceptual model is a mental model developed through the visible controls and interaction with the system.
        &lt;ul&gt;
          &lt;li&gt;Ideally the design and user models are the same, but a poor design can lead the user astray.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;the visible part of the device is the system image.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Visibility - the correct parts must be visible and they must convey the correct message.&lt;/li&gt;
  &lt;li&gt;Mapping - The relationship between two things
    &lt;ul&gt;
      &lt;li&gt;the mapping between controls (and how they move) and the results&lt;/li&gt;
      &lt;li&gt;natural mappings take advantage of physical analogies and cultural standards, “common sense”
        &lt;ul&gt;
          &lt;li&gt;spatial analogies: move a control left to go left, up to go up, down to go down. orient a control to what it controls, light switch on the left turns on/off lights to the left&lt;/li&gt;
          &lt;li&gt;turn a dial clockwise for more
            &lt;ul&gt;
              &lt;li&gt;slide a slider right for more, or to direct something to the right (stereo left/right balance)&lt;/li&gt;
              &lt;li&gt;flip a switch up to turn a light on&lt;/li&gt;
              &lt;li&gt;steering wheel - turn clockwise (right from the top) to turn right, counter-clockwise (left from the top) to turn left&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;additive dimension, louder, brighter, longer, and darker show incremental increase&lt;/li&gt;
          &lt;li&gt;substitutive dimensions: pitch, taste, color, location, there is no natural concept of more or less&lt;/li&gt;
          &lt;li&gt;check a box to indicate affirmation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;one or more controls per function is easier, less controls than functions adds difficulty
        &lt;ul&gt;
          &lt;li&gt;radio preset channel buttons + a tuner knob and channel frequency indicator (slide or digital)
            &lt;ul&gt;
              &lt;li&gt;note setting a preset is harder, for example press the button for less than 3 seconds to go to that channel, more than 3 seconds to make the current channel that preset value&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Feedback - send back to the user what action has been done or what result has been accomplished. - cause and effect, react to a user action.
    &lt;ul&gt;
      &lt;li&gt;tactile - push a button&lt;/li&gt;
      &lt;li&gt;audible - clicks, tones, beeps, verbal responses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Constraints - constrain the choices a user can make&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The power of observations - observe how people act, interact with objects.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Design - things are designed for people.
    &lt;ul&gt;
      &lt;li&gt;non-functional requirements:&lt;/li&gt;
      &lt;li&gt;manufacturing - how will it be produced, how much will it cost, can it be mass produced&lt;/li&gt;
      &lt;li&gt;maintenance - is it easy to repair&lt;/li&gt;
      &lt;li&gt;aesthetics - does it look good&lt;/li&gt;
      &lt;li&gt;usability - is it easy, pleasant to use?&lt;/li&gt;
      &lt;li&gt;safety&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mental Models - are conceptual models of how we perceive things to work based on our knowledge and perception.
    &lt;ul&gt;
      &lt;li&gt;often knowledge is fragmentary (you don’t know everything)&lt;/li&gt;
      &lt;li&gt;the mental model can only be as good as the information used to form it. If the design doesn’t inform the model then it is likely to be wrong. In the absence of information people use imagination to fill in the missing details.&lt;/li&gt;
      &lt;li&gt;people frequently misconstrue coincidence as cause and effect.&lt;/li&gt;
      &lt;li&gt;learned helplessness - failures lead people to blame themselves&lt;/li&gt;
      &lt;li&gt;taught helplessness -&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;psychology-of-everyday-things&quot;&gt;Psychology of Everyday Things&lt;/h4&gt;

&lt;p&gt;false assessment - once we have an explanation for discrepant events (right or wrong) we are complacent.&lt;/p&gt;

&lt;p&gt;Naive Theories - non-scientific sound sensible/plausible but may be wrong&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Seven stages of Action pg 47
    &lt;ul&gt;
      &lt;li&gt;perceive the state of the world&lt;/li&gt;
      &lt;li&gt;interpret the perception&lt;/li&gt;
      &lt;li&gt;evaluate the interpretations&lt;/li&gt;
      &lt;li&gt;goals&lt;/li&gt;
      &lt;li&gt;intent to act&lt;/li&gt;
      &lt;li&gt;sequence f actions&lt;/li&gt;
      &lt;li&gt;execution of actions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to get something done you must start with a notion of what is wanted - the goal.
next you act to accomplish the goal.
next you asses if the goal was met.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;goal is what you want, not how to get it. vague&lt;/li&gt;
  &lt;li&gt;intentions are the statements of what is to be done. an intention to act so as to achieve the goal&lt;/li&gt;
  &lt;li&gt;plan a sequence of actions to do&lt;/li&gt;
  &lt;li&gt;execution of the actions in proper sequence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t like the word intention for how it is being used. definition: intention - a thing intended; an aim or plan.  synonyms: aim, purpose, intent, objective, object, goal, target, end, design, plan, scheme, resolve, resolution, determination, wish, desire, ambition, idea, dream, aspiration&lt;/p&gt;

&lt;p&gt;would “solution” make more sense - goal -&amp;gt; solution -&amp;gt; action plan -&amp;gt; execute plan -&amp;gt; evaluate&lt;/p&gt;

&lt;p&gt;goal - I need more light
intention - I need to turn on the lamp.&lt;/p&gt;

&lt;p&gt;To me goal and intention seems like two levels of goals, an abstract or high level goal and concrete goal - the light is too simplistic. or maybe sometimes people start at the intention level as the goal.&lt;/p&gt;

&lt;p&gt;data-driven behavior - responding to events versus starting with a goal.&lt;/p&gt;

&lt;p&gt;Gulfs of execution and evaluation&lt;/p&gt;

&lt;p&gt;difficulty with mapping and feedback. the relationship between the actions, controls and outcome. a gulf is a difficulty in deriving the relationship between the mental intentions and interpretations and the physical actions and states.&lt;/p&gt;

&lt;p&gt;gulfs separate mental states from physical ones. they each reflect an aspect of the distance between mental representations of the person and the physical components and states of the environment.&lt;/p&gt;

&lt;p&gt;gulf of execution - does the system provide actions that correspond to the intentions of the person? Is it clear what actions must be performed to meet the intention?
gulf of evaluation - the amount of effort to or difficulty in interpreting the physical state of the system and if the intentions are met.&lt;/p&gt;

&lt;p&gt;The seven stages of action as design aids&lt;/p&gt;

&lt;p&gt;provide a checklist of questions to ask to ensure the gulfs are bridged (minimize gulfs)&lt;/p&gt;

&lt;p&gt;each stage of action has its own design strategies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can the user tell what actions are possible&lt;/li&gt;
  &lt;li&gt;determine mapping from intention to action&lt;/li&gt;
  &lt;li&gt;perform an action&lt;/li&gt;
  &lt;li&gt;see if the system is in the desired state (before and after an action)&lt;/li&gt;
  &lt;li&gt;interpret the system state desired or otherwise&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;knowledge-in-the-head-and-in-the-world&quot;&gt;Knowledge in the head and in the world&lt;/h4&gt;

&lt;p&gt;discrepancy between the precision of behavior and imprecision of knowledge - a typist can type correctly, but most couldn’t describe the location of letters on the keyboard.&lt;/p&gt;

&lt;p&gt;not all knowledge must be in the head, it can be distributed between the head, the world and constraints in the world. (internal plus external)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;information in the world&lt;/li&gt;
  &lt;li&gt;great precision is not required&lt;/li&gt;
  &lt;li&gt;natural constraints are present&lt;/li&gt;
  &lt;li&gt;cultural constraints are present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;two kinds of knowledge&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;knowledge “of” - declarative - facts and rules, easy to write and teach. a red light means stop.&lt;/li&gt;
  &lt;li&gt;knowledge “how” - procedural - how to perform actions -  hard to teach or write down - taught through demonstration and learned by practice - play an instrument - procedural knowledge is primarily subconscious.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;knowledge by delta - we don’t need to know every detail of things, just the differences that distinguesh choices. Size and color of coins.&lt;/p&gt;

&lt;p&gt;the structure of mental memory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;short term - 5-7 items immediately recallable - can be quickly lost when distracted&lt;/li&gt;
  &lt;li&gt;long term - memory of the past - it takes time to store and retrieve - how experiences are stored - not exact recall but interpreted through our existing memory/knowledge/understanding/experience.&lt;/li&gt;
  &lt;li&gt;three categories:
** arbitrary knowledge - facts - no back story
** meaningful relationships - facts+ (emotion?) sensible structure - makes sense (can be made to make sense), fit into mental model - interpretive
** through explanation - can be derived from mental model - understanding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;knowledge in the world - external memory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;out of sight, out of mind - specific to time and place&lt;/li&gt;
  &lt;li&gt;reminders
** rehearsal - keep in your mind by thinking about it
** notes&lt;/li&gt;
  &lt;li&gt;two aspects
** signal - string on the finger
** message - what to remember&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;trade off between knowledge in the head and world&lt;/p&gt;

&lt;p&gt;retrieve-ability
learning
efficiency of use first time
aesthetics&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;knowing-what-to-do&quot;&gt;knowing what to do&lt;/h4&gt;

&lt;p&gt;the difficulty of dealing with novel situations is directly related to the number of possibilities.
what are the controls and what can be done
how do we deal with novel situations&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;information in the head
** transfer of knowledge from using a similar object
** instruction/taught&lt;/li&gt;
  &lt;li&gt;information in the world
** the design
&lt;em&gt;** affordances - suggest a range of possibilities
**&lt;/em&gt; natural/physical constraints - limit the possibilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;there are four types of constraints&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;physical -&lt;/li&gt;
  &lt;li&gt;semantic - meaning in the situation - knowledge of the situation and the world.&lt;/li&gt;
  &lt;li&gt;cultural - vary by location, change/created over time. social rules&lt;/li&gt;
  &lt;li&gt;logical - natural mappings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;applying affordances and constraints&lt;/p&gt;

&lt;p&gt;switches&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;group related together&lt;/li&gt;
  &lt;li&gt;use shapes to distinguish&lt;/li&gt;
  &lt;li&gt;physical layout to match what they control
** vertical or horizontal rows of light switches don’t map to the lights
** a room “plan” type layout with the switches laid out where the lights are in the room&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-and-feedback&quot;&gt;visibility and feedback&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;visibility - what parts move, how do they move, where do you pull/push/slide/turn.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;feedback - what signifies a state change, what is decorative&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;visibility versus aesthetics - hiding controls for aesthetic effect.&lt;/li&gt;
  &lt;li&gt;where am I in a sequence of steps - VCR programming - gulf of execution&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;did the steps produce what I intended.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;sound for visibility
** beeping for button presses (informative and annoying)&lt;/li&gt;
  &lt;li&gt;auditory icons&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;to-err-is-human&quot;&gt;to Err is human&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;slip - subconscious mis-action - pressing the wrong key typing - these are typically small actions - execution phase of a plan. usually easy to detect and correct.
** happen from lack of attention, multi-tasking.
** six categories: capture, description, data-driven, associative activation, lack of activation, mode.
&lt;em&gt;** capture - a frequently done activity is done instead of the intended activity. two different actions have a similar starting sequence and you switch from the intended, typically less used, to the more used.
**&lt;/em&gt; description - the internal description of an action is not precise and you do the action out of context. the “right” action on the wrong object. putting your coffee in the refrigerator instead of the microwave to heat it. flipping the wrong light switch.
&lt;em&gt;** data driven - mixing up data - if your adding a series of numbers and someone in a different conversation says a number and you add it in. giving your old phone number instead of your new one.
**&lt;/em&gt; associative - internal thoughts interfering in actions.
&lt;em&gt;** loss of activation - forget why you went into the kitchen.
**&lt;/em&gt; mode errors - when a control has more than one function “modes of operation”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;slips are usually easy to detect because the result doesn’t match the goal, but if there is no feedback it may not be possible to know.&lt;/p&gt;

&lt;p&gt;level problem - goal or intention versus lower level actions.&lt;/p&gt;

&lt;p&gt;error correction seems to start at the lowest level and works out to higher level. This new code is broken, so start looking at the new code, but maybe the tester was testing on the wrong server or deployed the wrong version.&lt;/p&gt;

&lt;h4 id=&quot;design-lessons-from-slips&quot;&gt;design lessons from slips&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;prevention
** asking for confirmation before deleting, although it usually is more annoying than helpful and you don’t realize that you selected the wrong file until later. confirmation of the action versus that you have the right file. having the trash can is much better because you can easily recover by pulling the file out of the trash.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;detection and correction&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mistake - choosing the wrong goal - conscious deliberations - thinking your appointment is tomorrow when it was today - can be catastrophic. can be hard to detect because the execution was correct, but done for the wrong reason, over generalize a situation - jump to the wrong conclusion.
** poor decision, misclassified situation, fail to take all relevant factors into account. non-rational thought.
** rely on past experience/memory instead of systematic analysis.
** human thought is not pure logic - jumps and unfounded connections
** memory - schema theory, frame theory, semantic networks
&lt;strong&gt;* there is logic/order in individual structures
*** memory is associative
*** deductive thought applies the information from one schema to another schema to deduce the properties of it.
*** default values and exceptions
*** connectionist approach - neural nets
**&lt;/strong&gt; discrepant memories (out of the ordinary) carry equal weight to the “normal” ones that happen more frequently - bias behavior to them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;wide and deep structures - chess moves&lt;/li&gt;
  &lt;li&gt;shallow structures - may have many top level options, but no deep associations - selecting an ice cream: flavor, amount, container, topping&lt;/li&gt;
  &lt;li&gt;narrow structures - sequential, very limited variety - recipe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####conscious vs. unconscious thought&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unconscious thought is fast, it uses experience of “regular” or generalized information appropriate to the situation, things you do everyday, biased to the normal.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;conscious thought is slow and laborious, takes different options into account, ponders the situation and rationalizes the explanation. limited by short term memory
** short term memory - 5-6 “items”, can be overcome by organizing individual items into structures, using subconscious structures, understanding and explanations, more can be reasoned about.
*** mistakes are made by mismatch, applying the wrong organization structure, understanding or explanation to the wrong situation. this leads to “rare” situations being interpreted as either common or unique resulting in error.
** explaining away errors because they are the rare situation is common.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;social pressure has a strong influence on behavior.
** threat of punishment
** risk and reward
** time and economic pressures - taking a short-cut in proper procedures to save time or get back on schedule or to avoid extra costs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;designs can make it easy to err, but difficult or impossible to detect or recover.
** it should not be possible for one person with one simple error to cause catastrophic failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;design to minimize cause of errors and easy to recover.
** easy to undo an action or hard to do actions that can’t be undone.
** easy to discover errors and correct them
** think of errors as approximations in actions to complete a task, as the normal way of doing things.
** don’t punish a user for making mistakes and don’t take offense, most of all don’t ignore it.
** normal behavior isn’t always accurate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-to-deal-with-errors&quot;&gt;how to deal with errors&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;warning signals - car beeps when you open the door with the engine running - can’t distinguish deliberate actions from erroneous ones, frequently ignored such that when it is correctly signaling you, you will ignore it as usual.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;forcing function - can’t lock keys in car, you must lock the door from the outside.
** it isn’t easy to force people to do something they don’t want to do, ex: seat-belts.
** if you use a forcing function it must be reliable and distinguish legitimate cases from illegitimate.
** not every case affords forcing functions.
** interlock - forces proper sequence - ex: microwave can’t be turned on with the door open.
** lockin - prevent premature stopping of a process. ex: you have unsaved files or unsaved data on a form dialog.
** lockout -&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;put the required knowledge in the world, don’t require all the knowledge to be in the head.
** allow for more efficient operation when the user has learned the operations.&lt;/li&gt;
  &lt;li&gt;use the power of natural and artificial constraints, physical, logical, semantic, and cultural.
** use forcing functions and natural mappings.&lt;/li&gt;
  &lt;li&gt;narrow the gulfs of execution and evaluation.
** make things visible, operations readily available, outcomes apparent.&lt;/li&gt;
  &lt;li&gt;make the system state easily available and consistent with the goals, intentions and expectations of the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;design-challenge&quot;&gt;Design Challenge&lt;/h4&gt;

&lt;p&gt;natural design process - good design evolves - design -&amp;gt; test -&amp;gt; problems -&amp;gt; repeat.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;time constraints - lots of iterations are slow&lt;/li&gt;
  &lt;li&gt;feedback mechanism required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;design is a balance of aesthetics, usability, economics and manufacturing.&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;why-designers-go-astray&quot;&gt;why designers go astray&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;reward structure is loaded towards aesthetics.&lt;/li&gt;
  &lt;li&gt;designers aren’t typical users
    &lt;ul&gt;
      &lt;li&gt;big difference in the expertise required to be a designer versus a user.&lt;/li&gt;
      &lt;li&gt;designers can use their own device with knowlege in the head where as a novice user requires knowlegde in the world.&lt;/li&gt;
      &lt;li&gt;designers must work with real users from the beginning before any decisions are made.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the user/target audience isn’t always the client/buyer
    &lt;ul&gt;
      &lt;li&gt;builders and landlords buy appliances and equipment based on cost and aesthetics more than usability&lt;/li&gt;
      &lt;li&gt;the government frequently makes decisions based on cost&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;infinite gulf of evaluation - levels of bureaucracy, feedback/desires filtered through multiple levels.&lt;/p&gt;

&lt;h5 id=&quot;complexity-of-the-design-process&quot;&gt;complexity of the design process&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;design is the successive application of constraints until only  unique product is left&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The variety of possible solutions is enormous.
    &lt;ul&gt;
      &lt;li&gt;the range of expression granted the designer is vast.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the level and number of details to account for is astounding.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;varied and obscure uses - “use a pen to set the clock in a car” does the designer of the pen know this requirement?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;designing for special people
    &lt;ul&gt;
      &lt;li&gt;there is no such thing as the “average person” - physical anthropometry&lt;/li&gt;
      &lt;li&gt;make things adjustable to accommodate different users&lt;/li&gt;
      &lt;li&gt;left handed versus right handed - how can you adjust for mirror image use?&lt;/li&gt;
      &lt;li&gt;various capabilities: vision, hearing etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;selective attention: problem of focus
    &lt;ul&gt;
      &lt;li&gt;limits to what can be focused on&lt;/li&gt;
      &lt;li&gt;attend to immediate problems and ignore the rest&lt;/li&gt;
      &lt;li&gt;designers must consider the problems of focus in the design.
        &lt;ul&gt;
          &lt;li&gt;use of forcing functions for safety&lt;/li&gt;
          &lt;li&gt;proper feedback to avert evaluation problems&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;two-deadly-temptations-for-the-designer&quot;&gt;two deadly temptations for the designer&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;creeping featurism
    &lt;ul&gt;
      &lt;li&gt;tendency to keep adding new features
        &lt;ul&gt;
          &lt;li&gt;require more controls, more feedback to display, or instructions to know&lt;/li&gt;
          &lt;li&gt;adding more complexity&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if adding a feature can’t be avoided, can features be organized better? modularity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;worshipping false images
    &lt;ul&gt;
      &lt;li&gt;features for showing off, not using - fancy copiers to make you look cool to clients.&lt;/li&gt;
      &lt;li&gt;features for the appearance of technical sophistication.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;computer systems
    &lt;ul&gt;
      &lt;li&gt;programmers should not be responsible for the computer’s interactions with the user, it is not their expertise.&lt;/li&gt;
      &lt;li&gt;many programs are too abstract for users&lt;/li&gt;
      &lt;li&gt;how to do things wrong
        &lt;ul&gt;
          &lt;li&gt;make things invisible, widen the gulf of execution, give no feedback&lt;/li&gt;
          &lt;li&gt;be arbitrary - non-obvious command names (or key combos)&lt;/li&gt;
          &lt;li&gt;be inconsistent - change the way things are done from screen to screen&lt;/li&gt;
          &lt;li&gt;use idiosyncratic language - indecipherable error messages&lt;/li&gt;
          &lt;li&gt;make operations dangerous - lose work by clicking the wrong button.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;user-centered-design&quot;&gt;User Centered Design&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Make it easy for the user to know what actions are possible at any time&lt;/li&gt;
  &lt;li&gt;Make things visible
    &lt;ul&gt;
      &lt;li&gt;the conceptual model&lt;/li&gt;
      &lt;li&gt;alternative actions&lt;/li&gt;
      &lt;li&gt;results of actions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make it easy to evaluate the current state of the system&lt;/li&gt;
  &lt;li&gt;Use natural mappings
    &lt;ul&gt;
      &lt;li&gt;between intentions and the possible actions&lt;/li&gt;
      &lt;li&gt;between actions and results&lt;/li&gt;
      &lt;li&gt;what is visible and how it relates to system state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;in other words&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The user can figure out what to do&lt;/li&gt;
  &lt;li&gt;The user can tell what is going on&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;seven-principles-for-transforming-difficult-tasks-into-simple-ones&quot;&gt;Seven Principles for Transforming Difficult Tasks into Simple Ones&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Use knowledge in the world and in the head
    &lt;ul&gt;
      &lt;li&gt;people learn better/feel comfortable when knowledge is externally available.
        &lt;ul&gt;
          &lt;li&gt;explicit or derived through constraints&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;knowledge in the world is only useful if it is natural/easily mapped to actions and outcomes.&lt;/li&gt;
      &lt;li&gt;allow users to use knowledge in the head to make things faster.
        &lt;ul&gt;
          &lt;li&gt;(key-chords versus navigating through menus)&lt;/li&gt;
          &lt;li&gt;the design shouldn’t impede a user that knows what they want.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;good conceptual models make things easier.
        &lt;ul&gt;
          &lt;li&gt;natural - works the way the user thinks it should.&lt;/li&gt;
          &lt;li&gt;consistent - similar goals use similar actions&lt;/li&gt;
          &lt;li&gt;three models
            &lt;ul&gt;
              &lt;li&gt;design - designers conceptualization of how it works&lt;/li&gt;
              &lt;li&gt;user - users self explanation of how it works&lt;/li&gt;
              &lt;li&gt;system image - the user facing interface to the system&lt;/li&gt;
              &lt;li&gt;ideally the user model = design model, for this to happen the system image must communicate the design image to the user&lt;/li&gt;
              &lt;li&gt;the user aquires all knowledge of the system through the system image.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;manuals/help - if you need them, something is wrong.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Simplify the Structure of tasks
    &lt;ul&gt;
      &lt;li&gt;people only have limited resources for performing tasks
        &lt;ul&gt;
          &lt;li&gt;memory
            &lt;ul&gt;
              &lt;li&gt;short term - limited space&lt;/li&gt;
              &lt;li&gt;long term - needs to be triggered (hints), slower access
                &lt;ul&gt;
                  &lt;li&gt;sensible versus rote&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;concurrency
            &lt;ul&gt;
              &lt;li&gt;people can only concentrate on one thing at a time
                &lt;ul&gt;
                  &lt;li&gt;lose your place if distracted, where was I?&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;context switching can be expensive
                &lt;ul&gt;
                  &lt;li&gt;help the user with feed back if they get distracted&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;provide mental aids - blinking cursor, highlight the field I’m on, tell me how many characters I’ve typed and what is the maximum. identify typos, validate fields&lt;/li&gt;
          &lt;li&gt;make the invisible visible&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;automate tasks so users don’t have to do tedious things
        &lt;ul&gt;
          &lt;li&gt;don’t destroy the fun/pleasurable aspects of a process, maybe?&lt;/li&gt;
          &lt;li&gt;don’t take away control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;make tasks easier for the user
        &lt;ul&gt;
          &lt;li&gt;velcro straps instead of shoe laces.&lt;/li&gt;
          &lt;li&gt;digital versus analog clock.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make things visible for Execution and Evaluation
    &lt;ul&gt;
      &lt;li&gt;people make explanations for the things they see which may be wrong.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Once a satisfactory product has been achieved, further changes may be counterproductive, you have to know when to stop.&lt;/em&gt; pg 150&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is a lot easier to determine what is obvious after it has happened&lt;/em&gt; pg 129&lt;/p&gt;

&lt;p&gt;&lt;em&gt;technology changes quickly, people change slowly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;People are explanatory creatures&lt;/em&gt; - back story, mental models, interpretations pg 38&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When ever the number of functions and required operations exceeds the number of controls, the design become arbitrary, unnatural, and complicated.&lt;/em&gt; pq. 31&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">It’s not your fault - bad user experience is the fault of the designer.</summary></entry><entry><title type="html">My Experience with Event Sourcing - Zarex Event processing</title><link href="http://localhost:4000/2020/01/16/ZarexEventProcessing.html" rel="alternate" type="text/html" title="My Experience with Event Sourcing - Zarex Event processing" /><published>2020-01-16T00:00:00-05:00</published><updated>2020-01-16T00:00:00-05:00</updated><id>http://localhost:4000/2020/01/16/ZarexEventProcessing</id><content type="html" xml:base="http://localhost:4000/2020/01/16/ZarexEventProcessing.html">&lt;p&gt;Some of the problems with our event sourcing and processing logic is that the EventStore has the concept of entities and identity and does rudimentary validation to get around the fact that we relied heavily on a SQL database for validation and referential integrity and without this validation the EventStore accepted requests that resulted in events that the backend service could not process.&lt;/p&gt;

&lt;p&gt;Because we were starting from a more traditional application structure that we were adapting to event based we used some of the existing structures and wrapped them. We already had the concept of an EditModel that contained the changes to make to an entity’s persistent state. The EditModel was translated from json to an object that was passed to a controller which was a UI binding to an EditCommand that took the incoming data and updated a Hibernate persisted entity and subordinate entities in the context of a transaction.&lt;/p&gt;

&lt;p&gt;When we introduced the EventStore we introduced a PersistenceMode to the commands such that each was really two commands, one that would save the EditModel in the EventStore wrapped with some extra event specific data and one that would use the original persistence mechanism to update the hibernate backed entity in a local database for the service to use.&lt;/p&gt;

&lt;p&gt;The EventStore had a concept of entities and their state which was maintained in an entity id table. The identity of an entity included an id assigned by the EventStore plus external keys, for example email. It maintained the latest version (id of the last event submitted) used to validate if an incoming request was based on stale data and should be rejected, whether the entity was deleted such that external keys could be reused, and a table of relationships between entities that was used to validate if an object could be deleted or not.&lt;/p&gt;

&lt;p&gt;An important concept was that an event wasn’t really “something that already happened” until it was accepted by the EventStore. The expectation was that any event in the EventStore is valid and shall be processed by the services that support that type of event so that the state of an entity is consistent between all services.&lt;/p&gt;

&lt;p&gt;Each service maintained its own state for all entities. The state may look different, for example in our authentication service we only cared about email, password and hash salt, and in our communications service we only care about contact info and whether a user is opted in to receiving emails about a specific product. In our data warehouse there were lots of different representations of a user, plus data from external sources so that we could report on different aspects. We setup up our services this way so that they could work completely independent of each other and didn’t make requests to each other for data.&lt;/p&gt;

&lt;p&gt;There is a logical entity type, this represents a concept such as a User, this was used to associate different persistent models and event data to the same logical entities and allow services to indicate they care about events related to those entities even if the specific event may not be relevant to their local representation of the entity. It was the services responsability to process the message and ignore it if the data wasn’t relevant. For example the authentication service cared about users’ email and password, but not about users’ phone number so if an event came in to change the phone number it would process the event but do nothing. This relates to one of the problems with our rigorous consistency.&lt;/p&gt;</content><author><name>Ron Regan</name></author><summary type="html">Some of the problems with our event sourcing and processing logic is that the EventStore has the concept of entities and identity and does rudimentary validation to get around the fact that we relied heavily on a SQL database for validation and referential integrity and without this validation the EventStore accepted requests that resulted in events that the backend service could not process.</summary></entry><entry><title type="html">Getting back to FUNctional programming with jsrx</title><link href="http://localhost:4000/2019/11/22/jsrx.html" rel="alternate" type="text/html" title="Getting back to FUNctional programming with jsrx" /><published>2019-11-22T00:00:00-05:00</published><updated>2019-11-22T00:00:00-05:00</updated><id>http://localhost:4000/2019/11/22/jsrx</id><content type="html" xml:base="http://localhost:4000/2019/11/22/jsrx.html">&lt;p&gt;I’m working on a demo for upgrading https://globalofficelink.com/ to a single page app using Angular.&lt;/p&gt;

&lt;p&gt;I want to give the listings search page a better user experience. The minimum search is by type of listing (buy/rent versus
 selling) and country. There aren’t that many countries with listings so having a user select one of 200+ countries to find
 a listing is a terrible experience. I want the user to only have to select from countries that have listings.&lt;/p&gt;

&lt;p&gt;I could easily do this as a query on a database:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   select distinct c.* 
   from country c
   left join listing l on (c.countryCode == l.countryCode)
   where l.id is not null 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;except relational databases and SQL are so passé. I’m getting my countries from a REST service and if I want to be a UI 
 guy I have to do everything on the UI side, pulling from different services. I’ll assume I have a listing service but 
 for now I’ll pull dummy ones from an array.&lt;/p&gt;

&lt;p&gt;For some reason I thought pulling countries from a service would return a stream of countries, but in reality it returns
 a stream of country arrays with a single item. So right off the bat I had it wrong as &lt;code class=&quot;highlighter-rouge&quot;&gt;httpClient.get&amp;lt;Country&amp;gt;(this.countriesAPI)&lt;/code&gt;
 but Typescript didn’t complain because it had no idea what the service was returning. Plus I assumed an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; was
 iterable, but it wasn’t. I wasn’t sure how to turm my stream of country arrays into a stream of country so I just filtered
 the countries array with the array filter method and a static array of country codes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   // observable via array filter of country codes
   public getActiveCountriesTakeOne(): Observable&amp;lt;Country[]&amp;gt; {
     return this.countries.pipe(
       map(countries =&amp;gt; countries.filter(country =&amp;gt; ['US', 'CA', 'UK'].includes(country.alpha2Code))), tap(console.log));
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the rxjs map takes the array as one item, applies the function &lt;code class=&quot;highlighter-rouge&quot;&gt;countries.filter(...)&lt;/code&gt; and returns the correct set of
countries I want. This seems inelegant and kind of like cheating so the next step was to turn my country array 
into a stream of countries. This stumped me for a bit going through the documentation of functions, for example the
description for flatMap:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An Observable that emits the result of applying the projection function (and the optional deprecated resultSelector)
to each item emitted by the source Observable and merging the results of the Observables obtained from this transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;while I’m sure this is technically correct it is indecipherable to me and the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap(country =&amp;gt; country)&lt;/code&gt; converts
a stream of Country[] into a stream of Country seems like witchcraft. It takes an item from the source stream, in
this case a Country[] and makes that an Observable, subscribes to it and then applies the projection function, in this case
&lt;code class=&quot;highlighter-rouge&quot;&gt;country&lt;/code&gt;, to the items in that stream, which just returns the item.&lt;/p&gt;

&lt;p&gt;After flattening and mapping I could then filter the countries &lt;code class=&quot;highlighter-rouge&quot;&gt;filter(country =&amp;gt; ['US', 'CA', 'MX'].includes(country.alpha2Code))&lt;/code&gt;
but now I’m returning a stream of Countries, but the Select control doesn’t like that as it isn’t iterable. I need to return
a single item with an array. Hello reduce, you have a funny name, why isn’t it collect? It in Lisp and XSLT you use tail recursion
but this is more like unwinding recursion into iteration with a collection, anyway now I have a pure observable way of
generating my active countries:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   // observable filtering by array
   public getActiveCountriesTakeTwo(): Observable&amp;lt;Country[]&amp;gt; {
     return this.countries.pipe(
       flatMap(country =&amp;gt; country),
       filter(country =&amp;gt; ['US', 'CA', 'MX'].includes(country.alpha2Code)),
       reduce((countries, country) =&amp;gt; countries.concat(country), []), tap(console.log));
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The final problem to solve is the static array of active country codes, this needs to be from the active listings. I mocked
 up listings as an array listings with only a countryCode and then making it into an observable. I struggled trying to do
 this as a single pipeline. I then outlined what I wanted. I want to take my stream of countries and if the country was
 in the collection of distinct country codes from the listings, return it. I need the countries individually to see if they
 are in the list, but I need the active country codes collectively. I broke the problem into two parts, make a distinct
 list of country codes and then apply that to the countries. I already know that I can use &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; to turn my stream
 of listing[] into a stream of listings, I thought I could be clever and map directly to countryCode like 
 &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap(country =&amp;gt; country.alpha2Code)&lt;/code&gt; but that didn’t work. There is probably a way to get that to work but using 
 https://rxjs-dev.firebaseapp.com/operator-decision-tree I found &lt;code class=&quot;highlighter-rouge&quot;&gt;pluck()&lt;/code&gt; and that is pretty clean. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;distinct()&lt;/code&gt;
 is just like SQL, finally turn this back into an array with reduce. How do I bring two streams together? Using the 
 operator decision tree when I get my countries I want to then apply the filtering to see if it is in the active country
 code array, it came up with &lt;code class=&quot;highlighter-rouge&quot;&gt;withLatestFrom()&lt;/code&gt;. Using this took some time to wrap my head around but basically I take
  a country from the main observable and the array from the country codes and combine into &lt;code class=&quot;highlighter-rouge&quot;&gt;{country,activeCountryCodes}&lt;/code&gt;
  I then pass that single item into a filter
  &lt;code class=&quot;highlighter-rouge&quot;&gt;filter((countryWithCountryCodes) =&amp;gt; countryWithCountryCodes.countryCodes.includes(countryWithCountryCodes.country.alpha2Code))&lt;/code&gt;
  and if the country matches a code in the array it gets returned, otherwise not. Finally I collect that back into an
  array of countries for my select list and voilà.&lt;/p&gt;

&lt;p&gt;I don’t know if this is true, but I expect if I setup my service observables to poll the services and then switched
  to use &lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest()&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;withLatestFrom()&lt;/code&gt; then my select list of countries for searching would magically
  get updated if a new listing in a new country were added.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import { Listing } from './../listings.types';
 import { Code, SIZE_UNITS } from './../../codes/codes.types';
 import { CodesService } from './../../codes/codes.service';
 import { Injectable } from '@angular/core';
 import { Observable, of } from 'rxjs';
 import { tap, filter, flatMap, map, reduce, withLatestFrom, distinct, pluck } from 'rxjs/operators';
 import { HttpClient } from '@angular/common/http';
 import { Country } from '../../country.types';
 
 
 @Injectable({
   providedIn: 'root'
 })
 export class ListingsDataService {
   // https://restcountries.eu/rest/v2/all?fields=name;alpha2Code  -- returns just {&quot;name&quot;:&quot;Afghanistan&quot;,&quot;alpha2Code&quot;:&quot;AF&quot;}
   private countriesAPI = 'https://restcountries.eu/rest/v2/all';
 
   private httpClient: HttpClient;
   private codesService: CodesService;
   private countries: Observable&amp;lt;Country[]&amp;gt;;
   private listings: Observable&amp;lt;Listing[]&amp;gt;;
 
   constructor(httpClient: HttpClient) {
     this.httpClient = httpClient;
 
     this.countries = this.httpClient.get&amp;lt;Country[]&amp;gt;(this.countriesAPI);
     this.listings = of([
       {id: 1, countryCode: 'US'},
       {id: 2, countryCode: 'US'},
       {id: 3, countryCode: 'US'},
       {id: 4, countryCode: 'US'},
       {id: 5, countryCode: 'CA'},
       {id: 6, countryCode: 'CA'},
       {id: 7, countryCode: 'CA'},
       {id: 8, countryCode: 'MX'}
     ]);
    }
 
   public getAllCountries(): Observable&amp;lt;Country[]&amp;gt; {
     return this.countries.pipe(tap(console.log));
   }
 
   // observable via array filter of country codes
   public getActiveCountriesTakeOne(): Observable&amp;lt;Country[]&amp;gt; {
     return this.countries.pipe(
       map(countries =&amp;gt; countries.filter(country =&amp;gt; ['US', 'CA', 'UK'].includes(country.alpha2Code))), tap(console.log));
   }
 
   // observable filtering by array
   public getActiveCountriesTakeTwo(): Observable&amp;lt;Country[]&amp;gt; {
     return this.countries.pipe(
       flatMap(country =&amp;gt; country),
       filter(country =&amp;gt; ['US', 'CA', 'MX'].includes(country.alpha2Code)),
       reduce((countries, country) =&amp;gt; countries.concat(country), []), tap(console.log));
   }
   
   // observable countries filtered by unique country code observable from listings
   public getActiveCountries(): Observable&amp;lt;Country[]&amp;gt; {
     // observable of unique country codes array from listings
     let countryCodesFromListings: Observable&amp;lt;string[]&amp;gt; = this.listings.pipe(
       flatMap(listing =&amp;gt; listing), 
       pluck('countryCode'),
       distinct(), 
       reduce((uniqueCountryCodes,countryCode) =&amp;gt; uniqueCountryCodes.concat(countryCode), []),
       tap(console.log)
     );
     // obserable of active countries filtered by listing country codes
     return this.countries.pipe(
       flatMap(country =&amp;gt; country),
       withLatestFrom(countryCodesFromListings, (country, countryCodes) =&amp;gt; ({country,countryCodes})),
       filter((countryWithCountryCodes) =&amp;gt; countryWithCountryCodes.countryCodes.includes(countryWithCountryCodes.country.alpha2Code)),
       reduce((activeCountries, countryWithCountryCodes) =&amp;gt; activeCountries.concat(countryWithCountryCodes.country), []), 
       tap(console.log)
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ron Regan</name></author><summary type="html">I’m working on a demo for upgrading https://globalofficelink.com/ to a single page app using Angular.</summary></entry></feed>